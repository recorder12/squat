{"version":3,"sources":["fbase.js","routes/Home.js","routes/Auth.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","REACT_APP_DATABASE_URL","projectId","storageBucket","messagingSenderId","REACT_APP_MESSAGIN_ID","appId","firebase","initializeApp","model","webcam","ctx","firebaseInstance","authService","auth","dbService","firestore","Auth","useState","onSocialClick","event","a","name","target","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","class","onClick","URL","status","sentence","count","modelURL","metadataURL","size","d","Date","Home","userObj","scoreDisplay","document","getElementById","sentenceDisplay","nweets","setNweets","getNweets","collection","get","forEach","nweetObject","data","id","prev","useEffect","displayName","tmPose","getTotalClasses","innerHTML","setup","play","window","requestAnimationFrame","loop","canvas","width","height","getContext","timestamp","update","predict","estimatePose","pose","posenetOutput","prediction","probability","toFixed","drawPose","drawImage","keypoints","add","text","createdAt","toUTCString","creatorId","uid","nickname","location","reload","onSnapshot","snapshot","nweetArray","docs","map","doc","className","type","nweet","history","useHistory","newDisplayName","setNewDisplayName","onSubmit","preventDefault","updateProfile","onChange","value","placeholder","signOut","push","Navigation","style","display","justifyContent","marginTop","to","marginRight","marginLeft","flexDirection","alignItems","AppRouter","isLoggedIn","exact","path","Profile","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e58a1fbe.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\n\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\n","import React, { useState, useEffect } from \"react\";\nimport { dbService } from \"fbase\";\nimport * as tf from '@tensorflow/tfjs';\nimport * as tmPose from '@teachablemachine/pose';\n\n\nconst URL = \"https://teachablemachine.withgoogle.com/models/aj8L1qvCM/\";\nlet model, webcam, ctx, labelContainer, maxPredictions;\nvar status = \"stand\";\nvar sentence = \"Ready!!\";\nconst success = [\"가즈아!\", \"성공!\", \"좋아좋아!\", \"달려! 달려!\", \"헛뜨아!\", \"다리 지방이 타들어간다!\", \"고지가 코앞이다!\"];\nconst fail = [\"다시!\", \"자세 불량!\", \"회원님 이건 무효에요\", \"회원님 그러다 허리 다쳐요\", \"복근에 힘 빡 주고 다시!\"];\nvar count = 0;\nconst modelURL = URL + \"model.json\";\nconst metadataURL = URL + \"metadata.json\";\nconst size = 450;\nconst flip = true; // whether to flip the webcam\nvar d = new Date();\n\n\n\nconst Home = ({ userObj }) => {\n  var scoreDisplay = document.getElementById(\"score\");\n  var sentenceDisplay = document.getElementById(\"sentence\");\n\n  const [nweet, setNweet] = useState(\"\");\n  const [nweets, setNweets] = useState([]);\n  const getNweets = async () => {\n    const dbNweets = await dbService.collection(\"nweets\").get();\n    dbNweets.forEach((document) => {\n      const nweetObject = {\n        ...document.data(),\n        id: document.id,\n      };\n      setNweets((prev) => [nweetObject, ...prev]);\n    });\n  };\n  useEffect(() => {\n    getNweets();\n  }, []);\n\n\n\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  useEffect(() => {\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n      const nweetArray = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setNweets(nweetArray);\n    });\n  }, []);\n  \n  //AI part\n  async function init() {\n\n    // load the model and metadata\n    // Refer to tmImage.loadFromFiles() in the API to support files from a file picker\n    // Note: the pose library adds a tmPose object to your window (window.tmPose)\n    model = await tmPose.load(modelURL, metadataURL);\n    maxPredictions = model.getTotalClasses();\n\n    //score and sentence display seeting \n    scoreDisplay = document.getElementById(\"score\");\n    sentenceDisplay = document.getElementById(\"sentence\");\n    sentence = \"Start!!\";\n    sentenceDisplay.innerHTML = sentence;\n  \n    // Convenience function to setup a webcam\n    webcam = new tmPose.Webcam(size, size, flip); // width, height, flip\n    await webcam.setup(); // request access to the webcam\n    await webcam.play();\n    window.requestAnimationFrame(loop);\n    d = new Date();\n  \n    // append/get elements to the DOM\n    const canvas = document.getElementById(\"canvas\");\n    canvas.width = size; canvas.height = size;\n    ctx = canvas.getContext(\"2d\");\n    // labelContainer = document.getElementById(\"label-container\");\n    // for (let i = 0; i < maxPredictions; i++) { // and class labels\n    //     labelContainer.appendChild(document.createElement(\"div\"));\n    // }\n  }    \n    async function loop(timestamp) {\n      webcam.update(); // update the webcam frame\n      await predict();\n      window.requestAnimationFrame(loop);\n  }\n\n  async function predict() {\n    scoreDisplay = document.getElementById(\"score\");\n    sentenceDisplay = document.getElementById(\"sentence\");\n      // Prediction #1: run input through posenet\n      // estimatePose can take in an image, video or canvas html element\n      const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);\n      // Prediction 2: run input through teachable machine classification model\n      const prediction = await model.predict(posenetOutput);\n      if(prediction[0].probability.toFixed(2) > 0.9){\n        if(status === \"squat\"){\n          count++;\n          sentence = \"Success!\";\n          // sentence = success[Math.floor(Math.random() * success.length)];\n          scoreDisplay.innerHTML=count;\n          sentenceDisplay.innerHTML=sentence;\n        }\n        status = \"stand\";\n      }else if(prediction[1].probability.toFixed(2) > 0.9){\n        status = \"squat\";\n        sentenceDisplay.innerHTML=\"Squat!\";\n      }else if(prediction[2].probability.toFixed(2) > 0.9 && status != \"squat\"){\n        if(status === \"squat\" || status === \"stand\" ){\n          // sentence = fail[Math.floor(Math.random() * fail.length)];\n          sentenceDisplay.innerHTML=\"Benting...checking pose!\";\n        }\n      }\n      else{\n        sentenceDisplay.innerHTML=sentence = \"Watching... \";\n      }\n\n      // for (let i = 0; i < maxPredictions; i++) {\n      //     const classPrediction =\n      //         prediction[i].className + \": \" + prediction[i].probability.toFixed(2);\n      //     labelContainer.childNodes[i].innerHTML = classPrediction;\n      // }\n      // finally draw the poses\n      drawPose(pose);\n  }\n\n  function drawPose(pose) {\n      if (webcam.canvas) {\n          ctx.drawImage(webcam.canvas, 0, 0);\n          // draw the keypoints and skeleton\n          if (pose) {\n              const minPartConfidence = 0.5;\n              tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);\n              tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);\n          }\n      }\n  }\n\n  async function end(){\n    await dbService.collection(\"nweets\").add({\n      text: count, createdAt: d.toUTCString(),\n    creatorId: userObj.uid,\n    nickname: userObj.displayName\n    })\n\n    count = 0;\n    status = \"stand\";\n    window.location.reload();\n  }\n\n  return (\n    <div>\n  \n      <div className=\"guide_box\">\n        <div className=\"guide1\">Step1) Start 버튼을 눌러 스쿼트를 시작하세요!!</div>\n        <div className=\"guide2\">Step2) 왼쪽을 바라보고 정자세로 스쿼트를 하시면 갯수가 카운트됩니다!!</div>\n        <div className=\"guide3\">Step3) 운동을 마친 후 End를 누리시면 당신의 기록이 갱신됩니다!!</div>\n      </div>\n\n      <div className=\"main_box\">\n        <div className=\"screen\">\n          <button type=\"button\" onClick={init}>Start</button>\n          <button type=\"button\" onClick={end}>End</button>\n          <div><canvas id=\"canvas\"></canvas></div>\n          {/* <div id=\"label-container\"></div> */}\n        </div>\n\n        <div className=\"score-container\">\n            <div className=\"sentence\" >\n              <span id=\"sentence\">{sentence}</span>\n            </div>\n            <div className=\"score\" id=\"score\">\n              <span id=\"sentence\">{count}</span>\n            </div>\n        </div>\n      </div>\n\n      <div className=\"feed\">\n        {nweets.map((nweet) => (\n          <div key={nweet.id}>\n            <h4>{nweet.nickname + \"  did squat totally \" + nweet.text + \" counts (\" + nweet.createdAt + \")\" }</h4>\n          </div>\n        ))}\n      </div>\n\n    </div>\n    \n  );\n};\nexport default Home;\n\n\n\n//To do list\n// 1) getting data with limitation and sorting with date\n// 2) getting data with limitation and sorting with counts\n// 3) input voices with scores","import React, { useState } from \"react\";\nimport { authService, firebaseInstance } from \"fbase\";\n\nconst Auth = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      \n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n    \n  };\n  return (\n    <div>\n      {/* <form onSubmit={onSubmit}>\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n        />\n        {error}\n      </form>\n      <span onClick={toggleAccount}>\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span> */}\n      <div class=\"title\">Who is Squat King in this ground?! </div>\n      <div class=\"auth\">\n        <button onClick={onSocialClick} name=\"google\">\n          Continue with Google\n        </button>\n        <button onClick={onSocialClick} name=\"github\">\n          Continue with Github\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Auth;","import React, { useState } from \"react\";\nimport { authService } from \"fbase\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default ({ userObj }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n    }\n  };\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"Display name\"\n          value={newDisplayName}\n        />\n        <input type=\"submit\" value=\"Update Profile\" />\n      </form>\n      <button onClick={onLogOutClick}>Log Out</button>\n    </>\n  );\n};","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = ({ userObj }) => (\n  <nav className=\"nav\">\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n      <li className=\"home_link\">\n        <Link to=\"/\" style={{ marginRight: 10 }}>Home</Link>\n      </li>\n      <li className=\"profile_link\">\n        <Link to=\"/profile\"  style={{\n            marginLeft: 10,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          }}>Profile</Link>\n      </li>\n    </ul>\n  </nav>\n);\nexport default Navigation;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({ isLoggedIn, userObj }) => {\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedIn ? (\n          <>\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile userObj={userObj} />\n            </Route>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\nexport default AppRouter;","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserObj(user);\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, []);\n  return (\n    <>\n      {init ? (\n        <AppRouter isLoggedIn={isLoggedIn} userObj={userObj} />\n      ) : (\n        \"Initializing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n\n"],"sourceRoot":""}